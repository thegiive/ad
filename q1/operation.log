MAC~/spark-1.4.0-bin-hadoop1:> ./bin/spark-shell  --jars ~/source/hiring/target/scala-2.10/wisely-assembly-1.0.jar
Welcome to
____              __
/ __/__  ___ _____/ /__
_\ \/ _ \/ _ `/ __/  '_/
/___/ .__/\_,_/_/ /_/\_\   version 1.4.0
/_/

Using Scala version 2.10.4 (Java HotSpot(TM) 64-Bit Server VM, Java 1.7.0_71)
Type in expressions to have them evaluated.
Type :help for more information.
Spark context available as sc.
SQL context available as sqlContext.

scala> val df = sqlContext.read.format("org.apache.spark.sql.cassandra").options(Map( "table" -> "weather" , "keyspace" -> "lala" )).load
df: org.apache.spark.sql.DataFrame = [id: int, avgtemp: int, maxtemp: int, mintemp: int, time: int, wban: string]

scala> df.registerTempTable("weather")

scala> df.filter(df("time") >= 20150501 and df("time") < 20150531 ).describe().show
+-------+------------------+------------------+------------------+-----------------+--------------------+
|summary|                id|           avgtemp|           maxtemp|          mintemp|                time|
+-------+------------------+------------------+------------------+-----------------+--------------------+
|  count|               836|               836|               836|              836|                 836|
|   mean|137543.62081339714| 61.84090909090909| 74.02511961722487|49.11722488038278|2.0150515464114834E7|
| stddev|              null|10.297479653382704|12.041022012690359|9.905686344912343|                null|
|    min|            137088|                32|                35|               23|            20150501|
|    max|            138016|                85|                99|               75|            20150530|
+-------+------------------+------------------+------------------+-----------------+--------------------+


scala> df.filter(df("time") >= 20130501 and df("time") < 20130531 ).describe().show
+-------+-----------------+------------------+------------------+------------------+--------------------+
|summary|               id|           avgtemp|           maxtemp|           mintemp|                time|
+-------+-----------------+------------------+------------------+------------------+--------------------+
|  count|             1555|              1555|              1555|              1555|                1555|
|   mean|99617.10418006431|60.832797427652736| 76.03022508038585|45.129903536977494|2.0130515506752413E7|
| stddev|             null|12.361711640482337|13.525148171769139| 12.43384447446291|                null|
|    min|            98771|                21|                33|                 7|            20130501|
|    max|           100443|                91|               107|                79|            20130530|
+-------+-----------------+------------------+------------------+------------------+--------------------+


scala> sqlContext.sql("select percentile(maxtemp,0.5) as median_maxtemp from weather where time < 20150531 and time > 20150501 ").show()
+--------------+
|median_maxtemp|
+--------------+
|          76.0|
+--------------+


scala> sqlContext.sql("select percentile(maxtemp,0.5)  as median_maxtemp from weather where time < 20130531 and time > 20130501 ").show()
+--------------+
|median_maxtemp|
+--------------+
|          77.0|
+--------------+

scala> val avg_mintemp_df = df.groupBy("time").agg(avg("mintemp").alias("avg"))
avg_mintemp_df: org.apache.spark.sql.DataFrame = [time: int, avg: double]

scala> val date_avgtemp_tuple =  avg_mintemp_df.select((df("time") % 10000).alias("date"),$"time",$"avg").map(r => ( r(0) , (r(1),r(2))))
date_avgtemp_tuple: org.apache.spark.rdd.RDD[(Any, (Any, Any))] = MapPartitionsRDD[46] at map at <console>:23

scala> val result = date_avgtemp_tuple.groupByKey().values.map(_.toList.sortWith(  _._1.asInstanceOf[Int] <  _._1.asInstanceOf[Int])).collect
result: Array[List[(Any, Any)]] = Array(List((20070501,49.666666666666664), (20090501,46.25), (20110501,29.085106382978722), (20130501,34.142857142857146), (20150501,47.75)), List((20070502,48.18181818181818), (20090502,46.86363636363637), (20110502,27.19148936170213), (20130502,27.49019607843137), (20150502,49.32142857142857)), List((20070503,45.45454545454545), (20090503,44.45454545454545), (20110503,27.76595744680851), (20130503,25.830188679245282), (20150503,50.392857142857146)), List((20070504,47.083333333333336), (20090504,45.142857142857146), (20110504,36.87234042553192), (20130504,32.15094339622642), (20150504,52.964285714285715)), List((20070505,47.75), (20090505,50.2), (20110505,35.53191489361702), (20130505,37.28846153846154), (20150505,51.892857142857146)), List((20070506,43...
scala> result.foreach(println)
List((20070501,49.666666666666664), (20090501,46.25), (20110501,29.085106382978722), (20130501,34.142857142857146), (20150501,47.75))
List((20070502,48.18181818181818), (20090502,46.86363636363637), (20110502,27.19148936170213), (20130502,27.49019607843137), (20150502,49.32142857142857))
List((20070503,45.45454545454545), (20090503,44.45454545454545), (20110503,27.76595744680851), (20130503,25.830188679245282), (20150503,50.392857142857146))
List((20070504,47.083333333333336), (20090504,45.142857142857146), (20110504,36.87234042553192), (20130504,32.15094339622642), (20150504,52.964285714285715))
List((20070505,47.75), (20090505,50.2), (20110505,35.53191489361702), (20130505,37.28846153846154), (20150505,51.892857142857146))
List((20070506,43.75), (20090506,48.18181818181818), (20110506,41.04255319148936), (20130506,40.90384615384615), (20150506,51.392857142857146))
List((20070507,41.333333333333336), (20090507,52.04545454545455), (20110507,43.765957446808514), (20130507,41.54716981132076), (20150507,50.607142857142854))
List((20070508,41.916666666666664), (20090508,53.45454545454545), (20110508,45.391304347826086), (20130508,43.64150943396226), (20150508,50.67857142857143))
List((20070509,42.666666666666664), (20090509,49.13636363636363), (20110509,46.361702127659576), (20130509,42.52), (20150509,46.92857142857143))
List((20070510,45.0), (20090510,47.81818181818182), (20110510,41.38297872340426), (20130510,40.666666666666664), (20150510,41.392857142857146))
List((20070511,47.583333333333336), (20090511,47.59090909090909), (20110511,39.95652173913044), (20130511,41.45283018867924), (20150511,41.142857142857146))
List((20070512,49.416666666666664), (20090512,53.09090909090909), (20110512,39.255319148936174), (20130512,42.660377358490564), (20150512,45.392857142857146))
List((20070513,53.0), (20090513,50.90909090909091), (20110513,38.744680851063826), (20130513,46.490566037735846), (20150513,51.75))
List((20070514,53.18181818181818), (20090514,47.0), (20110514,38.53191489361702), (20130514,50.64150943396226), (20150514,51.07142857142857))
List((20070515,48.5), (20090515,53.09090909090909), (20110515,39.744680851063826), (20130515,52.08), (20150515,51.57142857142857))
List((20070516,47.166666666666664), (20090516,47.09090909090909), (20110516,38.38297872340426), (20130516,50.528301886792455), (20150516,50.07142857142857))
List((20070517,47.833333333333336), (20090517,44.36363636363637), (20110517,44.48936170212766), (20130517,52.05769230769231), (20150517,45.964285714285715))
List((20070518,49.2), (20090518,47.86363636363637), (20110518,42.03125), (20130518,53.09615384615385), (20150518,48.535714285714285))
List((20070519,50.0), (20090519,53.04545454545455), (20110519,41.61702127659574), (20130519,48.68), (20150519,49.642857142857146))
List((20070520,50.54545454545455), (20090520,51.68181818181818), (20110520,37.723404255319146), (20130520,45.31372549019608), (20150520,44.55555555555556))
List((20070521,51.5), (20090521,52.95454545454545), (20110521,41.1063829787234), (20130521,44.52), (20150521,45.857142857142854))
List((20070522,48.75), (20090522,53.04761904761905), (20110522,44.06521739130435), (20130522,44.6078431372549), (20150522,49.0))
List((20070523,46.0), (20090523,52.95454545454545), (20110523,47.276595744680854), (20130523,50.63461538461539), (20150523,50.48148148148148))
List((20070524,41.54545454545455), (20090524,50.95454545454545), (20110524,45.56521739130435), (20130524,52.55769230769231), (20150524,48.370370370370374))
List((20070525,47.5), (20090525,51.36363636363637), (20110525,42.744680851063826), (20130525,53.09803921568628), (20150525,47.44444444444444))
List((20070526,48.833333333333336), (20090526,48.54545454545455), (20110526,42.06382978723404), (20130526,53.21153846153846), (20150526,48.892857142857146))
List((20070527,51.916666666666664), (20090527,46.76190476190476), (20110527,49.723404255319146), (20130527,53.15094339622642), (20150527,54.392857142857146))
List((20070528,52.75), (20090528,46.77272727272727), (20110528,50.91489361702128), (20130528,50.698113207547166), (20150528,53.25))
List((20070529,51.5), (20090529,49.09090909090909), (20110529,54.319148936170215), (20130529,52.48076923076923), (20150529,50.642857142857146))
List((20070530,47.583333333333336), (20090530,52.36363636363637), (20110530,47.787234042553195), (20130530,49.46153846153846), (20150530,51.964285714285715))
List((20070531,48.36363636363637), (20090531,53.63636363636363), (20110531,39.319148936170215), (20130531,49.9811320754717), (20150531,51.642857142857146))

scala>
